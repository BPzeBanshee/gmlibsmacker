<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Known quirks dealing with GMS 1.4.9999

- surfaces are BGRA, thus the set_bgra switch in gmlibsmacker
- audio_exists() returns false on audio buffers
- buffer_set_surface implementation is fucked and requires workaround,
    fortunately YellowAfterlife has one so I've included it here for now
*/

// Basic variable init
buffer_set_surface_detect();

rfps_avg = 0;
rfps_str = "";
alarm[1] = room_speed;

mode = 0;
frame = 0;
timer = 0;
paused = false;
alarm_old = -1;

surf = -1;
s = -1;
bmp_buffer = -1;
snd_buffer = -1;

gmlibsmacker_init();

// Version string
trace("gmlibsmacker Version: "+gmlibsmacker_version());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update real FPS
rfps_str = string(round(rfps_avg/room_speed));
rfps_avg = 0;
alarm[1] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update frame
if mode == 0 then exit;
if frame &lt; fc - 1
    {
    frame++;
    event_user(1);
    alarm[0] = ceil(room_speed/ff);
    }
else
    {
    if s &gt; -1 then audio_stop_sound(s);
    event_user(2);
    mode = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rfps_avg += fps_real;

var full = window_get_fullscreen();
if keyboard_check_pressed(vk_f4) then window_set_fullscreen(!full);

switch mode
    {
    case 0:
        {
        window_set_caption("gmlibsmacker demo: press 1 to load file");
        if keyboard_check_pressed(ord("1"))
            {
            if full then window_set_fullscreen(!full);
            var d = get_open_filename_ext("SMK|*.smk|ZRB|*.zrb","",program_directory,"Open Smacker Movie File");
            if full then window_set_fullscreen(full);
            if d != ""
                {
                // Open SMK file
                var o = gmlibsmacker_open_smk(d);
                if o &lt; 0
                    {
                    msg("problem loading "+string(d));
                    }
                else
                    {
                    window_set_caption("gmlibsmacker demo: "+filename_name(d));
                    mode = 1;
                    }
                }
            }
        break;
        }
    case 1:
        {
        event_user(0);
        event_user(1);
        
        if s &gt; -1
            {
            audio_play_sound(s,0,false);
            timer = 0;
            alarm[0] = ceil(60/ff);
            mode++;
            }
        else 
            {
            msg(string("problem loading audio for movie"));
            mode = 0;
            }
        break;
        }
    case 2:
        {
        if keyboard_check_pressed(vk_space)
            {
            paused = !paused;
            
            if paused
                {
                audio_pause_sound(s);
                alarm_old = alarm[0];
                alarm[0] = -1;
                }
            else
                {
                audio_resume_sound(s);
                alarm[0] = alarm_old;
                alarm_old = -1;
                }
            }
        if !paused then timer += 1;
        // audio_sound_length with buffer sounds suspect in GMS 1.4.9999
        if timer &gt;= (audio_sound_length(s) * room_speed) 
        or keyboard_check_pressed(vk_escape)
            {
            audio_stop_sound(s);
            event_user(2);
            mode = 0;
            }
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unload when finished
audio_stop_sound(s);
if s &gt; -1 then audio_free_buffer_sound(s);

if surface_exists(surf) then surface_free(surf);
buffer_delete(bmp_buffer);
buffer_delete(snd_buffer);

gmlibsmacker_close_smk();
timer = 0;
frame = 0;

window_set_size(640,480);
view_wview[0] = 640;
view_hview[0] = 480;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Video to surface
gmlibsmacker_load_bitmap(buffer_get_address(bmp_buffer),frame);

// update surface
if !surface_exists(surf)
    {
    surf = surface_create(ww,hh);
    surface_set_target(surf);
    draw_clear_alpha(c_black,1);
    surface_reset_target();
    }
else
    {
    surface_resize(surf,ww,hh);
    surface_set_target(surf);
    draw_clear_alpha(c_black,1);
    surface_reset_target();
    }
    
buffer_set_surface(bmp_buffer,surf,0,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prepare Audio + Video metadata
// Track count
var c = gmlibsmacker_get_audio_track_count();
trace("number of channels: "+string(c));

var ac = gmlibsmacker_get_audio_channels(0);
var af = gmlibsmacker_get_audio_frequency(0);
var ab = gmlibsmacker_get_audio_bitdepth(0);
trace("track 0 info: "+string(ac)+" channels, "+string(af)+" hz, bitdepth: "+string(ab));

// Audio buffer
var a = gmlibsmacker_get_audio_size(0);
trace("gmlibsmacker_get_audio_size(0) returned "+string(a));

// memory needs to be pre-allocated first in GM-land
// before the DLL can manipulate it
snd_buffer = buffer_create(a,buffer_fast,1);
buffer_fill(snd_buffer,0,buffer_u8,255,buffer_get_size(snd_buffer));

var r = gmlibsmacker_load_audio(buffer_get_address(snd_buffer),a,0);
//trace("r returned "+string(r));
var cc; //cc = ac &gt; 1 ? audio_stereo : audio_mono;
if ac &gt; 1 then cc = audio_stereo else cc = audio_mono;
s = audio_create_buffer_sound(snd_buffer,buffer_u8,af,0,a,cc);
trace("s returned "+string(s));

// GMS1-specific: surface color order is BGRA instead of RGBA
var e = gmlibsmacker_set_bgra(true);
//show_message(e);

// Video buffer
ww = gmlibsmacker_get_video_width();
hh = gmlibsmacker_get_video_height();

// Y mode 0: plain, 1: interlaced (untested), 2: "double" (black padding line on even y values)
var yy = gmlibsmacker_get_video_y_mode();
trace("y mode: "+string(yy));
if yy &gt; 0 then hh = hh*2;

ff = gmlibsmacker_get_video_frame_rate();
fc = gmlibsmacker_get_video_frame_count();
trace(string(ww)+"x"+string(hh)+", "+string(ff)+" FPS, "+string(fc)+" frames");

// video buffer needs to be width * height * 4 in size for RGBA frames
// and needs to be prefilled GM-side so that the memory is allocated
bmp_buffer = buffer_create(ww*hh*4,buffer_fast,1);
buffer_fill(bmp_buffer,0,buffer_u8,255,buffer_get_size(bmp_buffer));

window_set_size(ww,hh);
view_wview[0] = ww;
view_hview[0] = hh;
//camera_set_view_size(view_camera[0],ww,hh);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gmlibsmacker_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);

var xx = view_wview[0]/2;//camera_get_view_width(view_camera[0])/2;
var yy = view_hview[0]/2;//camera_get_view_height(view_camera[0])/2;
switch mode
    {
    case 0: draw_text(xx,yy,"1 TO LOAD VIDEO"); break;
    case 2: 
    if surface_exists(surf) then draw_surface(surf,0,0); 
    if paused then draw_text(xx,yy,"PAUSED");
    break;
    }
    
draw_set_halign(fa_left);
draw_text(0,6,string(fps)+" FPS ("+rfps_str+" RFPS)");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
